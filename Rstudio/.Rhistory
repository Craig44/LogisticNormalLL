#########
compdat = Hak$subaTANageDEC
## restructure for Chris's Code
compdat$obs =  as.matrix(Hak$subaTANageDEC$obs[1:15,])
compdat$exp =  round(as.matrix(Hak$subaTANageDEC$fits[1:15,]),5)
compdat$N = Hak$subaTANageDEC$error.value[1:15,1]
# save this information to text files to compare with C++ code
write.table(x = compdat$obs, file = make.filename(file = "observed_data.txt", path = DIR$`C++_work`),quote = FALSE, row.names = FALSE, col.names = FALSE)
write.table(x = compdat$exp, file = make.filename(file = "expected_data.txt", path = DIR$`C++_work`),quote = FALSE, row.names = FALSE, col.names = FALSE)
write.table(x = compdat$N, file = make.filename(file = "error_data.txt", path = DIR$`C++_work`),quote = FALSE, row.names = FALSE, col.names = FALSE)
#### ------------------- C++ section ---------------
## run the program
setwd(DIR$`C++_work`);
if (file.exists("results.txt")) file.remove("results.txt")
system("LogNorm.exe notsexed 1",ignore.stdout = TRUE,ignore.stderr = TRUE)
setwd(DIR$R)
C_results = as.vector(read.table(make.filename(file = "results.txt", path = DIR$`C++_work`), header = F))
#### ------------------- Read in TMB model and load data needed --------
setwd(DIR$TMB)
setwd("AddLogisticNormal")
compile("orig.cpp")
dyn.load(dynlib("orig"))
load(file = make.filename(file = "tmb.RData", path = DIR$TMB))
## add the new switches
data$survey_at_age_obs = Obs_data$obs;
data$survey_at_age_error = Obs_data$N;
data$survey_years = as.numeric(rownames(data$survey_at_age_obs))
data$ages = 1:19
data$ageing_error = matrix(0,length(data$ages),length(data$ages))
diag(data$ageing_error) = 1;
data$fishery_at_age_obs = compdat$obs;
data$fishery_years = as.numeric(rownames(compdat$obs))
data$fishery_at_age_exp_LN_test = compdat$exp;
data$fishery_at_age_error_LN_test = compdat$N;
data$use_logistic_normal = 1;
unit_YCS = rep(1,length(data$years))
YCS_start = rep(0,length(data$years) - 1)
pars = list(log_R0 = 18, q = 0.2, s_a50 = 3, s_ato95 = 3, f_a50 = 3, f_ato95 = 3, log_sigma_r = log(0.5), YCS = YCS_start, log_norm_sigma = 0.1, log_norm_phi = c(-0.5,-0.5))
### ------------------- Run through R and TMB code to test that it does what we hope
sepbysex=F;
sexlag=F;
robust=F;
ARMA=F
sigma = 0.9;
phi = c(0.2)
pars$log_norm_sigma = log(sigma);
pars$log_norm_phi = log(phi);
data$ARMA = 0;
obj <- MakeADFun(data=data,parameters=pars, DLL = "orig")
obj_run = obj$report()
true_results = vector();
tmb_results = vector();
true_results[1] = NLLlogistnorm(compdat,sigma = sigma,phi,covmat=NULL,sepbysex=sepbysex, sexlag=sexlag, robust=robust, ARMA=ARMA)
tmb_results[1] = obj_run$neg_ll_fishery_age
compdat
sigma
obsmat <- compdat$obs
if(!is.matrix(obsmat))obsmat <- matrix(obsmat,nrow=1,
dimnames=list(NULL,names(obsmat)))
Nbin <- ncol(obsmat)
Nyear <- nrow(obsmat)
if(is.in('N',names(compdat))){
if(length(compdat$N)!=Nyear)stop('Wrong length for compdat$N')
wts <- sqrt(mean(compdat$N)/compdat$N)
} else wts <- rep(1,Nyear)
if(length(wts)==1)wts <- rep(1,Nyear)
expmat <- compdat$exp
if(!is.matrix(expmat)){
if(length(expmat)!=Nbin)stop('Wrong size for compdat$exp')
expmat <- matrix(rep(expmat,Nyear),Nyear,byrow=T,
dimnames=list(NULL,names(expmat)))
} else if(!all(dim(expmat)==dim(obsmat)))stop('Wrong size for compdat$exp')
if(is.null(covmat))
covmat <- covmat.logistnorm(sigma,phi,colnames(obsmat),sepbysex,sexlag,
ARMA)
covmat <- covmat.logistnorm(sigma,phi,colnames(obsmat),sepbysex,sexlag,
ARMA)
covmat
round(covmat,3)
obj_run$covar
round(obj_run$covar,2)
round(covmat,3)
round(obj_run$covar,3)
setwd(DIR$TMB)
setwd("AddLogisticNormal")
compile("orig.cpp")
compile("orig.cpp")
compile("orig.cpp")
compile("orig.cpp")
compile("orig.cpp")
compile("orig.cpp")
compile("orig.cpp")
compile("orig.cpp")
compile("orig.cpp")
compile("orig.cpp")
compile("orig.cpp")
compile("orig.cpp")
## This script is for debugging the TMB models while I try to translate my C++ code -> TMB .hpp files for use in
## the assessments I want to explore
## This shouldn't really be used after I am happt the model performs as expected.
## Add Libraries
library(TMB)
library(TMBdebug) # to stop windows from crashing
library(casal)
## Add other dependency funcitons
setwd("C:/Work/Projects/PhD/Logistic_normal/Rstudio");
source("Initialisation.r");
## Bring some data to debug this model
load(file = make.filename(file = "tmb.RData", path = DIR$TMB))
setwd(DIR$TMB)
setwd("AddLogisticNormal")
compile("orig.cpp")
dyn.load(dynlib("orig"))
## Bring in the HAK data to test
Hak  = extract.fits(path = DIR$'csl_files', file = "HAK.log");
compdat = Hak$subaTANageDEC
## restructure for Chris's Code
compdat$obs =  as.matrix(Hak$subaTANageDEC$obs)
compdat$exp =  round(as.matrix(Hak$subaTANageDEC$fits),5)
compdat$N = Hak$subaTANageDEC$error.value[,1]
Obs_data = Hak$subaOBSage
Obs_data$obs = as.matrix(Hak$subaOBSage$obs)
Obs_data$exp = round(as.matrix(Hak$subaOBSage$fits),5)
Obs_data$N = Hak$subaOBSage$error.value[,1]
## add the new switches
data$survey_at_age_obs = Obs_data$obs[1:15,];
data$survey_at_age_error = Obs_data$N[1:15];
data$survey_years = as.numeric(rownames(data$survey_at_age_obs))
data$ages = 1:19
data$ageing_error = matrix(0,length(data$ages),length(data$ages))
diag(data$ageing_error) = 1
data$fishery_at_age_obs = compdat$obs;
data$fishery_years = as.numeric(rownames(compdat$obs))
data$fishery_at_age_exp_LN_test = compdat$exp;
data$fishery_at_age_error_LN_test = compdat$N;
data$use_logistic_normal = 1;
data$ARMA = 1;
unit_YCS = rep(1,length(data$years))
#YCS_log_simp = Simplex_transform(unit_YCS)$transformed_vars
YCS_start = rep(0,length(data$years) - 1)
pars = list(log_R0 = 18, q = 0.2, s_a50 = 3, s_ato95 = 3, f_a50 = 3, f_ato95 = 3, log_sigma_r = log(0.5), YCS = YCS_start, log_norm_sigma = 0.1, log_norm_phi = c(-0.5,-0.5))
#gdbsource("model.R", TRUE)
compile("orig.cpp")
dyn.load(dynlib("orig"))
obj_ran <- MakeADFun(data=data,parameters=pars, DLL = "orig")
output = obj_ran$report()
output$covar
output$rho
output$neg_ll_fishery_age
output$neg_ll_survey_age
#gdbsource("model.R", TRUE)
compile("orig.cpp")
dyn.load(dynlib("orig"))
obj_ran <- MakeADFun(data=data,parameters=pars, DLL = "orig")
output = obj_ran$report()
output$covar
output$rho
output$neg_ll_fishery_age
output$neg_ll_survey_age
#gdbsource("model.R", TRUE)
compile("orig.cpp")
dyn.load(dynlib("orig"))
obj_ran <- MakeADFun(data=data,parameters=pars, DLL = "orig")
output = obj_ran$report()
output$covar
output$rho
output$neg_ll_fishery_age
output$neg_ll_survey_age
#gdbsource("model.R", TRUE)
compile("orig.cpp")
#gdbsource("model.R", TRUE)
compile("orig.cpp")
dyn.load(dynlib("orig"))
obj_ran <- MakeADFun(data=data,parameters=pars, DLL = "orig")
output = obj_ran$report()
output$covar
output$rho
output$neg_ll_fishery_age
#gdbsource("model.R", TRUE)
compile("orig.cpp")
dyn.load(dynlib("orig"))
obj_ran <- MakeADFun(data=data,parameters=pars, DLL = "orig")
output$rho
output$covar
output$rho
output$neg_ll_fishery_age
rce("model.R", TRUE)
compile("orig.cpp")
dyn.load(dynlib("orig"))
obj_ran <- MakeADFun(data=data,parameters=pars, DLL = "orig")
output = obj_ran$report()
output$covar
output$rho
solve(output$covar)
#gdbsource("model.R", TRUE)
compile("orig.cpp")
dyn.load(dynlib("orig"))
obj_ran <- MakeADFun(data=data,parameters=pars, DLL = "orig")
#gdbsource("model.R", TRUE)
compile("orig.cpp")
#gdbsource("model.R", TRUE)
compile("orig.cpp")
dyn.load(dynlib("orig"))
obj_ran <- MakeADFun(data=data,parameters=pars, DLL = "orig")
output$covar
output$log_det
output$neg_ll_LN
output$log_obs_tot
#gdbsource("model.R", TRUE)
compile("orig.cpp")
dyn.load(dynlib("orig"))
obj_ran <- MakeADFun(data=data,parameters=pars, DLL = "orig")
output = obj_ran$report()
output$covar
output$log_det
output$neg_ll_LN
output$log_obs_tot
#gdbsource("model.R", TRUE)
compile("orig.cpp")
dyn.load(dynlib("orig"))
#gdbsource("model.R", TRUE)
compile("orig.cpp")
obj_ran <- MakeADFun(data=data,parameters=pars, DLL = "orig")
dyn.load(dynlib("orig"))
obj_ran <- MakeADFun(data=data,parameters=pars, DLL = "orig")
output = obj_ran$report()
output$covar
output$log_det
output$neg_ll_LN
output$log_obs_tot
neg_ll_fishery_age
output$V_mat
solve(output$V_mat)
det
det()
?det
det(output$V_mat)
output$log_det
output$log_det
log(det(output$V_mat))
#gdbsource("model.R", TRUE)
compile("orig.cpp")
dyn.load(dynlib("orig"))
obj_ran <- MakeADFun(data=data,parameters=pars, DLL = "orig")
output = obj_ran$report()
output$covar
output$log_det
log(det(output$V_mat))
output$neg_ll_LN
output$V_mat_inv
solve(output$V_mat)
#gdbsource("model.R", TRUE)
compile("orig.cpp")
dyn.load(dynlib("orig"))
obj_ran <- MakeADFun(data=data,parameters=pars, DLL = "orig")
output = obj_ran$report()
output$covar
output$log_det
output$V_mat_inv
solve(output$V_mat)
log(det(output$V_mat))
output$neg_ll_LN
exa = matrix(0,4,4)
diag(exa) = 1;
solve(exa)
log(det(exa))
#gdbsource("model.R", TRUE)
compile("orig.cpp")
dyn.load(dynlib("orig"))
dyn.load(dynlib("orig"))
obj_ran <- MakeADFun(data=data,parameters=pars, DLL = "orig")
output = obj_ran$report()
output$covar
output$log_det
output$V_mat_inv
solve(output$V_mat)
log(det(output$V_mat))
output$neg_ll_LN
output$log_obs_tot
output$log_det
#gdbsource("model.R", TRUE)
compile("orig.cpp")
dyn.load(dynlib("orig"))
obj_ran <- MakeADFun(data=data,parameters=pars, DLL = "orig")
output = obj_ran$report()
output$covar
output$log_det
output$V_mat_inv
solve(output$V_mat)
names(output)
output$log_det_please
output$neg_ll_fishery_age
#gdbsource("model.R", TRUE)
compile("orig.cpp")
dyn.load(dynlib("orig"))
obj_ran <- MakeADFun(data=data,parameters=pars, DLL = "orig")
getwd()
output = obj_ran$report()
output$covar
output$log_det_please
output$log_det
#gdbsource("model.R", TRUE)
compile("orig.cpp")
dyn.load(dynlib("orig"))
obj_ran <- MakeADFun(data=data,parameters=pars, DLL = "orig")
output = obj_ran$report()
output$covar
output$covar
output$log_det_please
output$log_det
output$V_mat_inv
solve(output$V_mat)
log(det(output$V_mat))
output$neg_ll_LN
output$log_obs_tot
output$neg_ll_survey_age
output$neg_ll_fishery_age
## Add Libraries
library(TMB)
library(TMBdebug) # to stop windows from crashing
library(casal)
## Add other dependency funcitons
setwd("C:/Work/Projects/PhD/Logistic_normal/Rstudio");
source("Chris_original_code.r")
source("Initialisation.r");
Hak  = extract.fits(path = DIR$'csl_files', file = "HAK.log");
#########
## HAK
#########
compdat = Hak$subaTANageDEC
## restructure for Chris's Code
compdat$obs =  as.matrix(Hak$subaTANageDEC$obs[1:15,])
compdat$exp =  round(as.matrix(Hak$subaTANageDEC$fits[1:15,]),5)
compdat$N = Hak$subaTANageDEC$error.value[1:15,1]
# save this information to text files to compare with C++ code
write.table(x = compdat$obs, file = make.filename(file = "observed_data.txt", path = DIR$`C++_work`),quote = FALSE, row.names = FALSE, col.names = FALSE)
write.table(x = compdat$exp, file = make.filename(file = "expected_data.txt", path = DIR$`C++_work`),quote = FALSE, row.names = FALSE, col.names = FALSE)
write.table(x = compdat$N, file = make.filename(file = "error_data.txt", path = DIR$`C++_work`),quote = FALSE, row.names = FALSE, col.names = FALSE)
#### ------------------- C++ section ---------------
## run the program
setwd(DIR$`C++_work`);
if (file.exists("results.txt")) file.remove("results.txt")
system("LogNorm.exe notsexed 1",ignore.stdout = TRUE,ignore.stderr = TRUE)
setwd(DIR$R)
C_results = as.vector(read.table(make.filename(file = "results.txt", path = DIR$`C++_work`), header = F))
#### ------------------- Read in TMB model and load data needed --------
setwd(DIR$TMB)
setwd("AddLogisticNormal")
compile("orig.cpp")
dyn.load(dynlib("orig"))
load(file = make.filename(file = "tmb.RData", path = DIR$TMB))
## add the new switches
data$survey_at_age_obs = Obs_data$obs;
data$survey_at_age_error = Obs_data$N;
data$survey_years = as.numeric(rownames(data$survey_at_age_obs))
data$ages = 1:19
data$ageing_error = matrix(0,length(data$ages),length(data$ages))
diag(data$ageing_error) = 1;
data$fishery_at_age_obs = compdat$obs;
data$fishery_years = as.numeric(rownames(compdat$obs))
data$fishery_at_age_exp_LN_test = compdat$exp;
data$fishery_at_age_error_LN_test = compdat$N;
data$use_logistic_normal = 1;
unit_YCS = rep(1,length(data$years))
YCS_start = rep(0,length(data$years) - 1)
pars = list(log_R0 = 18, q = 0.2, s_a50 = 3, s_ato95 = 3, f_a50 = 3, f_ato95 = 3, log_sigma_r = log(0.5), YCS = YCS_start, log_norm_sigma = 0.1, log_norm_phi = c(-0.5,-0.5))
### ------------------- Run through R and TMB code to test that it does what we hope
sepbysex=F;
sexlag=F;
robust=F;
ARMA=F
sigma = 0.9;
phi = c(0.2)
pars$log_norm_sigma = log(sigma);
pars$log_norm_phi = log(phi);
data$ARMA = 0;
obj <- MakeADFun(data=data,parameters=pars, DLL = "orig")
obj_run = obj$report()
true_results = vector();
tmb_results = vector();
true_results[1] = NLLlogistnorm(compdat,sigma = sigma,phi,covmat=NULL,sepbysex=sepbysex, sexlag=sexlag, robust=robust, ARMA=ARMA)
tmb_results[1] = obj_run$neg_ll_fishery_age
sigma = 0.2;
pars$log_norm_sigma = log(sigma);
obj <- MakeADFun(data=data,parameters=pars, DLL = "orig")
obj_run = obj$report()
true_results[2] = NLLlogistnorm(compdat,sigma = sigma,phi,covmat=NULL,sepbysex=sepbysex, sexlag=sexlag, robust=robust, ARMA=ARMA)
tmb_results[2] = obj_run$neg_ll_fishery_age
sigma = 0.4;
phi = c(0.2,0.5)
pars$log_norm_sigma = log(sigma);
pars$log_norm_phi = log(phi);
obj <- MakeADFun(data=data,parameters=pars, DLL = "orig")
obj_run = obj$report()
true_results[3] = NLLlogistnorm(compdat,sigma = sigma,phi,covmat=NULL,sepbysex=sepbysex, sexlag=sexlag, robust=robust, ARMA=ARMA)
tmb_results[3] = obj_run$neg_ll_fishery_age
sigma = 0.6;
phi = c(0.4,0.1)
pars$log_norm_sigma = log(sigma);
pars$log_norm_phi = log(phi);
obj <- MakeADFun(data=data,parameters=pars, DLL = "orig")
obj_run = obj$report()
true_results[4] = NLLlogistnorm(compdat,sigma = sigma,phi,covmat=NULL,sepbysex=sepbysex, sexlag=sexlag, robust=robust, ARMA=ARMA)
tmb_results[4] = obj_run$neg_ll_fishery_age
ARMA = TRUE
data$ARMA = 0;
obj <- MakeADFun(data=data,parameters=pars, DLL = "orig")
obj_run = obj$report()
true_results[5] = NLLlogistnorm(compdat,sigma = sigma,phi,covmat=NULL,sepbysex=sepbysex, sexlag=sexlag, robust=robust, ARMA=ARMA)
tmb_results[5] = obj_run$neg_ll_fishery_age
true_results - C_results
cbind(true_results, t(C_results),tmb_results,true_results -t(C_results))
## (02) TestTMBmodel.R
## @Author C Marsh
## @Date 2/9/2018
## @Description
## Compare my TMB model against the original script for unsexed comp data, as my TMB model is unsexed at them moment
## Add Libraries
library(TMB)
library(TMBdebug) # to stop windows from crashing
library(casal)
## Add other dependency funcitons
setwd("C:/Work/Projects/PhD/Logistic_normal/Rstudio");
source("Chris_original_code.r")
source("Initialisation.r");
Hak  = extract.fits(path = DIR$'csl_files', file = "HAK.log");
#########
## HAK
#########
compdat = Hak$subaTANageDEC
## restructure for Chris's Code
compdat$obs =  as.matrix(Hak$subaTANageDEC$obs[1:15,])
compdat$exp =  round(as.matrix(Hak$subaTANageDEC$fits[1:15,]),5)
compdat$N = Hak$subaTANageDEC$error.value[1:15,1]
# save this information to text files to compare with C++ code
write.table(x = compdat$obs, file = make.filename(file = "observed_data.txt", path = DIR$`C++_work`),quote = FALSE, row.names = FALSE, col.names = FALSE)
write.table(x = compdat$exp, file = make.filename(file = "expected_data.txt", path = DIR$`C++_work`),quote = FALSE, row.names = FALSE, col.names = FALSE)
write.table(x = compdat$N, file = make.filename(file = "error_data.txt", path = DIR$`C++_work`),quote = FALSE, row.names = FALSE, col.names = FALSE)
#### ------------------- C++ section ---------------
## run the program
setwd(DIR$`C++_work`);
if (file.exists("results.txt")) file.remove("results.txt")
system("LogNorm.exe notsexed 1",ignore.stdout = TRUE,ignore.stderr = TRUE)
setwd(DIR$R)
C_results = as.vector(read.table(make.filename(file = "results.txt", path = DIR$`C++_work`), header = F))
#### ------------------- Read in TMB model and load data needed --------
setwd(DIR$TMB)
setwd("AddLogisticNormal")
compile("orig.cpp")
dyn.load(dynlib("orig"))
load(file = make.filename(file = "tmb.RData", path = DIR$TMB))
## add the new switches
data$survey_at_age_obs = Obs_data$obs;
data$survey_at_age_error = Obs_data$N;
data$survey_years = as.numeric(rownames(data$survey_at_age_obs))
data$ages = 1:19
data$ageing_error = matrix(0,length(data$ages),length(data$ages))
diag(data$ageing_error) = 1;
data$fishery_at_age_obs = compdat$obs;
data$fishery_years = as.numeric(rownames(compdat$obs))
data$fishery_at_age_exp_LN_test = compdat$exp;
data$fishery_at_age_error_LN_test = compdat$N;
data$use_logistic_normal = 1;
unit_YCS = rep(1,length(data$years))
YCS_start = rep(0,length(data$years) - 1)
pars = list(log_R0 = 18, q = 0.2, s_a50 = 3, s_ato95 = 3, f_a50 = 3, f_ato95 = 3, log_sigma_r = log(0.5), YCS = YCS_start, log_norm_sigma = 0.1, log_norm_phi = c(-0.5,-0.5))
### ------------------- Run through R and TMB code to test that it does what we hope
sepbysex=F;
sexlag=F;
robust=F;
ARMA=F
sigma = 0.9;
phi = c(0.2)
pars$log_norm_sigma = log(sigma);
pars$log_norm_phi = log(phi);
data$ARMA = 0;
obj <- MakeADFun(data=data,parameters=pars, DLL = "orig")
obj_run = obj$report()
true_results = vector();
tmb_results = vector();
true_results[1] = NLLlogistnorm(compdat,sigma = sigma,phi,covmat=NULL,sepbysex=sepbysex, sexlag=sexlag, robust=robust, ARMA=ARMA)
tmb_results[1] = obj_run$neg_ll_fishery_age
sigma = 0.2;
pars$log_norm_sigma = log(sigma);
obj <- MakeADFun(data=data,parameters=pars, DLL = "orig")
obj_run = obj$report()
true_results[2] = NLLlogistnorm(compdat,sigma = sigma,phi,covmat=NULL,sepbysex=sepbysex, sexlag=sexlag, robust=robust, ARMA=ARMA)
tmb_results[2] = obj_run$neg_ll_fishery_age
sigma = 0.4;
phi = c(0.2,0.5)
pars$log_norm_sigma = log(sigma);
pars$log_norm_phi = log(phi);
obj <- MakeADFun(data=data,parameters=pars, DLL = "orig")
obj_run = obj$report()
true_results[3] = NLLlogistnorm(compdat,sigma = sigma,phi,covmat=NULL,sepbysex=sepbysex, sexlag=sexlag, robust=robust, ARMA=ARMA)
tmb_results[3] = obj_run$neg_ll_fishery_age
sigma = 0.6;
phi = c(0.4,0.1)
pars$log_norm_sigma = log(sigma);
pars$log_norm_phi = log(phi);
obj <- MakeADFun(data=data,parameters=pars, DLL = "orig")
obj_run = obj$report()
true_results[4] = NLLlogistnorm(compdat,sigma = sigma,phi,covmat=NULL,sepbysex=sepbysex, sexlag=sexlag, robust=robust, ARMA=ARMA)
tmb_results[4] = obj_run$neg_ll_fishery_age
ARMA = TRUE
data$ARMA = 0;
obj <- MakeADFun(data=data,parameters=pars, DLL = "orig")
obj_run = obj$report()
true_results[5] = NLLlogistnorm(compdat,sigma = sigma,phi,covmat=NULL,sepbysex=sepbysex, sexlag=sexlag, robust=robust, ARMA=ARMA)
tmb_results[5] = obj_run$neg_ll_fishery_age
true_results - C_results
cbind(true_results, t(C_results),tmb_results,true_results -t(C_results))
