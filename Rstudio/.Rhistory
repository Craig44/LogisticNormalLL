data$fishery_at_age_obs = as.matrix(fishery_compdat$obs);
data$fishery_at_age_error = fishery_compdat$error.value[,1];
data$fishery_years = fishery_compdat$year
data$use_logistic_normal = 1;
data$ARMA = 0;
unit_YCS = rep(1,length(data$years))
YCS_start = rep(0,length(data$years) - 1)
pars = list(log_R0 = 18, q = 0.2, s_a50 = 3, s_ato95 = 3, f_a50 = 3, f_ato95 = 3, log_sigma_r = log(0.5), YCS = YCS_start, log_norm_sigma_fishery = 0.1, log_norm_phi_fishery = c(-0.5,-0.5), log_norm_sigma_survey = 0.1, log_norm_phi_survey = c(-0.5,-0.5))
obj <- MakeADFun(data=data,parameters=pars, DLL = "model");
## add the new switches
data$survey_at_age_obs = as.matrix(survey_compdat$obs[surv_ndx,]);
obj <- MakeADFun(data=data,parameters=pars, DLL = "model");
obj_run = obj$report();
obj$fn()
obj$gr()
exp(-5)
exp(5)
exp(2)
exp(1.5)
exp(1)
exp(-1)
exp(-3)
exp(-4)
log(0.0001)
exp(-9.21034)
log(0.99)
exp(-0.0100503)
lower = c(16, 0.01,1,1,1,1,-2.995732,rep(-20, length(YCS_start)), -4,-9,-9, -4,-9,-9)
upper = c(19, 1,20 ,20 ,20 ,20, 0.9162907,rep(20, length(YCS_start)),1,-0.01,-0.01,1,-0.01,-0.01)
obj$fn()
obj$gr()
obj$env$tracepar = TRUE
names(lower) = names(obj$par)
names(upper) = names(obj$par)
lower
opt <- nlminb(start = obj$par, objective = obj$fn, gradient = obj$gr, lower=lower, upper=upper, control = list(abs.tol = 0.0000001, rel.tol = 0.000001, eval.max = 20000, iter.max = 20000))
opt$objective()
opt$objective
opt$convergence
?nlminb
?optim
opt <- nlminb(start = obj$par, objective = obj$fn, gradient = obj$gr, lower=lower, upper=upper, control = list(abs.tol = 0.0001, rel.tol = 0.0001, eval.max = 20000, iter.max = 20000))
opt
1.796576e+01
exp(17.96576)
exp(-5.308572e-01)
exp(7.800620e-0)
exp(7.800620e-02)
exp(7.609337e-02)
-1.043536e+12
opt_obj_run = obj$report();
opt_obj_run$neg_ll
opt_obj_run$neg_ll_survey_bio
opt_obj_run$neg_ll_survey_age
opt_obj_run$neg_ll_fishery_age
opt_obj_run$survey_age_expectations
opt_obj_run$last.par
obj$last.par
obj$last.par()
names(obj)
obj$env$last.par()
obj$env()$last.par()
names(obj$env())
names(obj$env
)
obj$env$last.par()
obj$env$last.par
opt_obj_run$true_ycs
-1.212470e-03
data$deviations
## look at pearson residuals
opt_obj_run$survey_age_pred
## Add Libraries
library(TMBdebug) # to stop windows from crashing
library(casal)
## Add other dependency funcitons
setwd("C:/Work/Projects/PhD/Logistic_normal/Rstudio");
source("Initialisation.r");
Hak  = extract.fits(path = DIR$'csl_files', file = "HAK.log");
survey_compdat = Hak$subaTANageDEC
survey_bio = Hak$subaTANbiomassDEC
length(survey_bio$year); length(survey_compdat$year)
surv_ndx = survey_compdat$year %in% survey_bio$year
fishery_compdat = Hak$subaTANageDEC
## add the new switches
data$survey_at_age_obs = as.matrix(survey_compdat$obs[surv_ndx,]);
data$survey_at_age_error = survey_compdat$error.value[surv_ndx,1];
data$survey_years = survey_compdat$year[surv_ndx]
data$survey_biomass_obs = survey_bio$obs
data$survey_biomass_error = survey_bio$error.value
data$ages = 1:19
data$ageing_error = matrix(0,length(data$ages),length(data$ages))
diag(data$ageing_error) = 1;
data$fishery_at_age_obs = as.matrix(fishery_compdat$obs);
data$fishery_at_age_error = fishery_compdat$error.value[,1];
data$fishery_years = fishery_compdat$year
data$use_logistic_normal = 1;
data$ARMA = 0;
unit_YCS = rep(1,length(data$years))
YCS_start = rep(0,length(data$years) - 1)
pars = list(log_R0 = 18, q = 0.2, s_a50 = 3, s_ato95 = 3, f_a50 = 3, f_ato95 = 3, log_sigma_r = log(0.5), YCS = YCS_start, log_norm_sigma_fishery = 0.1, log_norm_phi_fishery = c(-0.5,-0.5), log_norm_sigma_survey = 0.1, log_norm_phi_survey = c(-0.5,-0.5))
## check it works
setwd(DIR$TMB)
compile("model.cpp")
dyn.load(dynlib("model"))
obj <- MakeADFun(data=data,parameters=pars, DLL = "model");
obj_run = obj$report();
obj$fn()
obj$gr()
lower = c(16, 0.01,1,1,1,1,-2.995732,rep(-10, length(YCS_start)), -4,-9,-9, -4,-9,-9)
upper = c(19, 1,20 ,20 ,20 ,20, 0.9162907,rep(10, length(YCS_start)),1,-0.01,-0.01,1,-0.01,-0.01)
obj$fn()
obj$gr()
obj$env$tracepar = TRUE
names(lower) = names(obj$par)
names(upper) = names(obj$par)
opt <- nlminb(start = obj$par, objective = obj$fn, gradient = obj$gr, lower=lower, upper=upper, control = list(abs.tol = 0.0001, rel.tol = 0.0001, eval.max = 20000, iter.max = 20000))
opt_obj_run = obj$report();
## look at the likelihood components
opt_obj_run$neg_ll
opt_obj_run$neg_ll_survey_bio
opt_obj_run$neg_ll_survey_age
opt_obj_run$neg_ll_fishery_age
obj$env$last.par
opt_obj_run$true_ycs
### ------------------ Compare residuals -------------------##
Sres.logistnorm(compdat,sigma = sigma,phi,covmat=NULL,sepbysex=sepbysex, sexlag=sexlag, robust=robust, ARMA=ARMA)
Sres.logistnorm
### ------------------ Compare residuals -------------------##
Sres.logistnorm(compdat,sigma = sigma,phi, sepbysex=sepbysex, sexlag=sexlag, ARMA=ARMA)
## look at pearson residuals
opt_obj_run$survey_age_pred
compile("model.cpp")
dyn.load(dynlib("model"))
obj <- MakeADFun(data=data,parameters=pars, DLL = "model");
obj_run = obj$report();
obj$fn()
obj$gr()
lower = c(16, 0.01,1,1,1,1,-2.995732,rep(-10, length(YCS_start)), -4,-9,-9, -4,-9,-9)
upper = c(19, 1,20 ,20 ,20 ,20, 0.9162907,rep(10, length(YCS_start)),1,-0.01,-0.01,1,-0.01,-0.01)
obj$fn()
obj$gr()
obj$env$tracepar = TRUE
names(lower) = names(obj$par)
names(upper) = names(obj$par)
opt <- nlminb(start = obj$par, objective = obj$fn, gradient = obj$gr, lower=lower, upper=upper, control = list(abs.tol = 0.0001, rel.tol = 0.0001, eval.max = 20000, iter.max = 20000))
opt_obj_run = obj$report();
## look at the likelihood components
opt_obj_run$neg_ll
opt_obj_run$neg_ll_survey_bio
opt_obj_run$neg_ll_survey_age
obj$env$last.par
opt_obj_run$neg_ll_fishery_age
opt_obj_run$true_ycs
## look at pearson residuals
opt_obj_run$survey_age_pred
opt_obj_run$fishery_age_pred
opt_obj_run$fishery_age_pred
## Double check the Survey age comp
surv_comp_Dat$obs = opt_obj_run$survey_age_expectations
## Double check the Survey age comp
surv_comp_Dat = list();
surv_comp_Dat$obs = opt_obj_run$survey_age_expectations
## Double check the Survey age comp
surv_comp_Dat = list();
surv_comp_Dat$obs = data$survey_at_age_obs
surv_comp_Dat$exp = opt_obj_run$survey_age_expectations
surv_comp_Dat$N = data$survey_at_age_error
obj$env$last.par
obj$env$last.par["log_norm_phi_survey"]
phi =c(exp(obj$env$last.par[(length(pars) - 1):length(pars)])
phi =c(exp(obj$env$last.par[(length(pars) - 1):length(pars)]))
phi =c(exp(obj$env$last.par[(length(pars) - 1):length(pars)]))
phi
phi =c(exp(obj$env$last.par[(length(obj$env$last.par) - 1):length(obj$env$last.par)]))
phi
## Double check the Survey age comp
surv_comp_Dat = list();
surv_comp_Dat$obs = data$survey_at_age_obs
surv_comp_Dat$exp = opt_obj_run$survey_age_expectations
surv_comp_Dat$N = data$survey_at_age_error
sigma = exp(obj$env$last.par["log_norm_sigma_survey"])
phi =c(exp(obj$env$last.par[(length(obj$env$last.par) - 1):length(obj$env$last.par)]))
sepbysex=F;
sexlag=F;
robust=F;
ARMA=F
value =  NLLlogistnorm(surv_comp_Dat,sigma = sigma,phi,covmat=NULL,sepbysex=sepbysex, sexlag=sexlag, robust=robust, ARMA=ARMA)
phi
ARMA
compdat = surv_comp_Dat
obsmat <- compdat$obs
if(!is.matrix(obsmat))obsmat <- matrix(obsmat,nrow=1,
dimnames=list(NULL,names(obsmat)))
Nbin <- ncol(obsmat)
Nyear <- nrow(obsmat)
if(is.in('N',names(compdat))){
if(length(compdat$N)!=Nyear)stop('Wrong length for compdat$N')
wts <- sqrt(mean(compdat$N)/compdat$N)
} else wts <- rep(1,Nyear)
if(length(wts)==1)wts <- rep(1,Nyear)
expmat <- compdat$exp
if(!is.matrix(expmat)){
if(length(expmat)!=Nbin)stop('Wrong size for compdat$exp')
expmat <- matrix(rep(expmat,Nyear),Nyear,byrow=T,
dimnames=list(NULL,names(expmat)))
} else if(!all(dim(expmat)==dim(obsmat)))stop('Wrong size for compdat$exp')
if(is.null(covmat))
covmat <- covmat.logistnorm(sigma,phi,colnames(obsmat),sepbysex,sexlag,
ARMA)
covmat
sigma
sigma
phi
colnames(obsmat)
covmat <- covmat.logistnorm(sigma,phi,colnames(obsmat),sepbysex,sexlag,
ARMA)
binnam = colnames(obsmat)
getrho <- function(phi,kk,ARMA) {
if(length(phi)==1) {
phi^(1:(kk-1))
} else if(ARMA) {
ARMAacf(ar=phi[1],ma=phi[2],lag.max=kk)[-1]
} else {
ARMAacf(ar=phi,lag.max=kk)[-1]
}
}
Nbin <- length(binnam)
if(length(sigma)==1)
sigma <- rep(sigma,Nbin)
if(length(sigma)!=Nbin)
stop('Wrong length for argument sigma')
if(!is.in(length(phi),1:2))
stop('Wrong length for phi')
if(length(phi)==2 & !ARMA){
if(phi[2]<=(-1) | phi[2]>=(1-abs(phi[1])))
stop('Invalid value for phi')
}
phi[2]>=(1-abs(phi[1]))
1-abs(phi[1]
)
compile("model.cpp")
dyn.load(dynlib("model"))
obj <- MakeADFun(data=data,parameters=pars, DLL = "model");
obj_run = obj$report();
obj$fn()
obj$gr()
lower = c(16, 0.01,1,1,1,1,-2.995732,rep(-10, length(YCS_start)), -4,-9,-9, -4,-9,-9)
upper = c(19, 1,20 ,20 ,20 ,20, 0.9162907,rep(10, length(YCS_start)),1,-0.01,-0.01,1,-0.01,-0.01)
obj$fn()
obj$gr()
obj$env$tracepar = TRUE
names(lower) = names(obj$par)
names(upper) = names(obj$par)
opt <- nlminb(start = obj$par, objective = obj$fn, gradient = obj$gr, lower=lower, upper=upper, control = list(abs.tol = 0.0001, rel.tol = 0.0001, eval.max = 20000, iter.max = 20000))
opt_obj_run = obj$report();
## look at the likelihood components
opt_obj_run$neg_ll
?nlminb
opt
opt_obj_run = obj$report();
## look at the likelihood components
opt_obj_run$neg_ll
opt_obj_run$neg_ll_survey_bio
opt_obj_run$neg_ll_survey_age
opt_obj_run$neg_ll_fishery_age
obj$env$last.par
opt_obj_run$true_ycs
## look at pearson residuals
opt_obj_run$survey_age_pred
## look at the likelihood components
opt_obj_run$neg_ll
opt_obj_run$neg_ll_survey_bio
opt_obj_run$neg_ll_survey_age
opt_obj_run$neg_ll_fishery_age
compile("model.cpp")
dyn.load(dynlib("model"))
compile("model.cpp")
dyn.load(dynlib("model"))
obj <- MakeADFun(data=data,parameters=pars, DLL = "model");
obj_run = obj$report();
obj$fn()
obj$gr()
length(YCS_start)
library(TMBhelper) # to stop windows from crashing
obj <- MakeADFun(data=data,parameters=pars, DLL = "model");
## check it works
setwd(DIR$TMB)
compile("model.cpp")
## check it works
setwd(DIR$TMB)
compile("model.cpp")
dyn.load(dynlib("model"))
obj <- MakeADFun(data=data,parameters=pars, DLL = "model");
obj_run = obj$report();
obj$fn()
obj$gr() ## if a parameter is zero something is not right, means it is not-identifiable
data$survey_at_age_obs
data$fishery_years
data$years
names(data)
data$years = 1989:2013
data$ageing_error = matrix(0,length(data$ages),length(data$ages))
diag(data$ageing_error) = 1;
data$fishery_at_age_obs = as.matrix(fishery_compdat$obs);
data$fishery_at_age_error = fishery_compdat$error.value[,1];
data$fishery_years = fishery_compdat$year
data$use_logistic_normal = 1;
data$ARMA = 0;
unit_YCS = rep(1,length(data$years))
YCS_start = rep(0,length(data$years) - 1)
pars = list(log_R0 = 18, q = 0.2, s_a50 = 3, s_ato95 = 3, f_a50 = 3, f_ato95 = 3, log_sigma_r = log(0.5), YCS = YCS_start, log_norm_sigma_fishery = 0.1, log_norm_phi_fishery = c(-0.5,-0.5), log_norm_sigma_survey = 0.1, log_norm_phi_survey = c(-0.5,-0.5))
## check it works
setwd(DIR$TMB)
compile("model.cpp")
dyn.load(dynlib("model"))
obj <- MakeADFun(data=data,parameters=pars, DLL = "model");
obj_run = obj$report();
obj$fn()
obj$gr() ## if a parameter is zero something is not right, means it is not-identifiable
lower = c(16, 0.01,1,1,1,1,-2.995732,rep(-10, length(YCS_start)), -4,-9,-9, -4,-9,-9)
upper = c(19, 1,20 ,20 ,20 ,20, 0.9162907,rep(10, length(YCS_start)),1,-0.01,-0.01,1,-0.01,-0.01)
exp(-4)
exp(-1)
exp(1)
obj <- MakeADFun(data=data,parameters=pars, DLL = "model");
obj_run = obj$report();
obj$fn()
obj$gr() ## if a parameter is zero something is not right, means it is not-identifiable
lower = c(16, 0.01,1,1,1,1,-2.995732,rep(-10, length(YCS_start)), -3,-9,-9, -3,-9,-9)
upper = c(19, 1,20 ,20 ,20 ,20, 0.9162907,rep(10, length(YCS_start)),0.7,-0.01,-0.01,0.7,-0.01,-0.01)
obj$fn()
obj$gr()
obj$env$tracepar = TRUE
names(lower) = names(obj$par)
names(upper) = names(obj$par)
opt <- nlminb(start = obj$par, objective = obj$fn, gradient = obj$gr, lower=lower, upper=upper, control = list(abs.tol = 0.0001, rel.tol = 0.0001, eval.max = 20000, iter.max = 20000))
opt_obj_run = obj$report();
opt
opt_obj_run = obj$report();
## look at the likelihood components
opt_obj_run$neg_ll
opt_obj_run$neg_ll_survey_bio
opt_obj_run$neg_ll_survey_age
opt_obj_run$neg_ll_fishery_age
obj$env$last.par
opt_obj_run$true_ycs
## look at pearson residuals
opt_obj_run$survey_age_pred
opt_obj_run$fishery_age_pred
## Double check the Survey age comp
surv_comp_Dat = list();
surv_comp_Dat$obs = data$survey_at_age_obs
surv_comp_Dat$exp = opt_obj_run$survey_age_expectations
surv_comp_Dat$N = data$survey_at_age_error
sigma = exp(obj$env$last.par["log_norm_sigma_survey"])
phi =c(exp(obj$env$last.par[(length(obj$env$last.par) - 1):length(obj$env$last.par)]))
sepbysex=F;
sexlag=F;
robust=F;
ARMA=F
value =  NLLlogistnorm(surv_comp_Dat,sigma = sigma,phi,covmat=NULL,sepbysex=sepbysex, sexlag=sexlag, robust=robust, ARMA=ARMA)
value
sigma
phi
## look at the likelihood components
opt_obj_run$neg_ll
opt_obj_run$neg_ll_survey_age
opt_obj_run$neg_ll_fishery_age
ARMA = data$ARMA;
unit_YCS = rep(1,length(data$years))
YCS_start = rep(0,length(data$years) - 1)
pars = list(log_R0 = 18, q = 0.2, s_a50 = 3, s_ato95 = 3, f_a50 = 3, f_ato95 = 3, log_sigma_r = log(0.5), YCS = YCS_start, log_norm_sigma_fishery = 0.1, log_norm_phi_fishery = c(-0.5,-0.5), log_norm_sigma_survey = 0.1, log_norm_phi_survey = c(-0.5,-0.5))
## check it works
setwd(DIR$TMB)
compile("model.cpp")
dyn.load(dynlib("model"))
obj <- MakeADFun(data=data,parameters=pars, DLL = "model");
obj_run = obj$report();
obj$fn()
obj$gr() ## if a parameter is zero something is not right, means it is not-identifiable
compile("model.cpp")
dyn.load(dynlib("model"))
compile("model.cpp")
dyn.load(dynlib("model"))
obj <- MakeADFun(data=data,parameters=pars, DLL = "model");
obj_run = obj$report();
obj$fn()
obj$gr() ## if a parameter is zero something is not right, means it is not-identifiable
lower = c(16, 0.01,1,1,1,1,-2.995732,rep(-10, length(YCS_start)), -3,-9,-9, -3,-9,-9)
upper = c(19, 1,20 ,20 ,20 ,20, 0.9162907,rep(10, length(YCS_start)),0.7,-0.01,-0.01,0.7,-0.01,-0.01)
obj$fn()
obj$gr()
obj$env$tracepar = TRUE
names(lower) = names(obj$par)
names(upper) = names(obj$par)
opt <- nlminb(start = obj$par, objective = obj$fn, gradient = obj$gr, lower=lower, upper=upper, control = list(abs.tol = 0.0001, rel.tol = 0.0001, eval.max = 20000, iter.max = 20000))
opt_obj_run = obj$report();
## look at the likelihood components
opt_obj_run$neg_ll
opt_obj_run$neg_ll_survey_bio
opt_obj_run$neg_ll_survey_age
opt_obj_run$neg_ll_fishery_age
obj$env$last.par
opt_obj_run$true_ycs
## look at pearson residuals
opt_obj_run$survey_age_pred
opt_obj_run$fishery_age_pred
## Double check the Survey age comp
surv_comp_Dat = list();
surv_comp_Dat$obs = data$survey_at_age_obs
surv_comp_Dat$exp = opt_obj_run$survey_age_expectations
surv_comp_Dat$N = data$survey_at_age_error
sigma = exp(obj$env$last.par["log_norm_sigma_survey"])
phi =c(exp(obj$env$last.par[(length(obj$env$last.par) - 1):length(obj$env$last.par)]))
## Double check the Survey age comp
surv_comp_Dat = list();
surv_comp_Dat$obs = data$survey_at_age_obs
surv_comp_Dat$exp = opt_obj_run$survey_age_expectations
sigma = exp(obj$env$last.par["log_norm_sigma_survey"])
surv_comp_Dat$N = data$survey_at_age_error
phi =c(exp(obj$env$last.par[(length(obj$env$last.par) - 1):length(obj$env$last.par)]))
sepbysex=F;
sexlag=F;
robust=F;
#ARMA=F
value =  NLLlogistnorm(surv_comp_Dat,sigma = sigma,phi,covmat=NULL,sepbysex=sepbysex, sexlag=sexlag, robust=robust, ARMA=ARMA)
#ARMA=F
value =  NLLlogistnorm(surv_comp_Dat,sigma = sigma,phi,covmat=NULL,sepbysex=sepbysex, sexlag=sexlag, robust=robust, ARMA=ARMA)
ARMA
data$ARMA
data$ARMA = 1;
ARMA = data$ARMA;
obj <- MakeADFun(data=data,parameters=pars, DLL = "model");
obj_run = obj$report();
obj$fn()
obj$gr() ## if a parameter is zero something is not right, means it is not-identifiable
lower = c(16, 0.01,1,1,1,1,-2.995732,rep(-10, length(YCS_start)), -3,-9,-9, -3,-9,-9)
upper = c(19, 1,20 ,20 ,20 ,20, 0.9162907,rep(10, length(YCS_start)),0.7,-0.01,-0.01,0.7,-0.01,-0.01)
obj$fn()
obj$gr()
obj$env$tracepar = TRUE
names(lower) = names(obj$par)
names(upper) = names(obj$par)
opt <- nlminb(start = obj$par, objective = obj$fn, gradient = obj$gr, lower=lower, upper=upper, control = list(abs.tol = 0.0001, rel.tol = 0.0001, eval.max = 20000, iter.max = 20000))
opt_obj_run = obj$report();
## look at the likelihood components
opt_obj_run$neg_ll
opt_obj_run$neg_ll_survey_bio
opt_obj_run$neg_ll_survey_age
opt_obj_run$neg_ll_fishery_age
obj$env$last.par
opt_obj_run$true_ycs
## look at pearson residuals
opt_obj_run$survey_age_pred
opt_obj_run$fishery_age_pred
## Double check the Survey age comp
surv_comp_Dat = list();
surv_comp_Dat$obs = data$survey_at_age_obs
surv_comp_Dat$exp = opt_obj_run$survey_age_expectations
surv_comp_Dat$N = data$survey_at_age_error
sigma = exp(obj$env$last.par["log_norm_sigma_survey"])
phi =c(exp(obj$env$last.par[(length(obj$env$last.par) - 1):length(obj$env$last.par)]))
sepbysex=F;
sexlag=F;
robust=F;
#ARMA=F
value =  NLLlogistnorm(surv_comp_Dat,sigma = sigma,phi,covmat=NULL,sepbysex=sepbysex, sexlag=sexlag, robust=robust, ARMA=ARMA)
value
value;opt_obj_run$neg_ll_survey_age
obsprop <- compdat$obs
expprop <- compdat$exp
if(!is.matrix(obsprop))obsprop <- matrix(obsprop,1)
Nbin <- ncol(obsprop)
Nyear <- nrow(obsprop)
if(!is.matrix(expprop))expprop <- matrix(rep(expprop,Nyear),
Nyear, byrow=T,
dimnames=list(NULL,names(expprop)))
if(ncol(expprop)!=Nbin)stop('Wrong size for expprop')
covmat <- covmat.logistnorm(sigma,phi,colnames(expprop),
sepbysex,sexlag,ARMA)
wts <- if(length(compdat$N)!=0) {
sqrt(mean(compdat$N)/compdat$N)
} else {
rep(1,Nyear)
}
wts
Kmat <- cbind(diag(Nbin-1),-1)
Vmat <- Kmat %*% (covmat %*% t(Kmat))
Kmat
Vmat
sdmat <- matrix(rep(sqrt(diag(Vmat)),Nyear),Nyear,byrow=T)*wts
sdmat
rep(sqrt(diag(Vmat))
rep(sqrt(diag(Vmat)),Nyear)
rep(sqrt(diag(Vmat)),Nyear)
sqrt(diag(Vmat))
rep(sqrt(diag(Vmat)),Nyear)
length(sqrt(diag(Vmat)))
dim(Vmat)
sdmat <- matrix(rep(sqrt(diag(Vmat)),Nyear),Nyear,byrow=T)*wts
sdmat
wts
## check it works
setwd(DIR$TMB)
compile("model.cpp")
compile("model.cpp")
compile("model.cpp")
compile("model.cpp")
compile("model.cpp")
compile("model.cpp")
sqrt(diag(Vmat))
